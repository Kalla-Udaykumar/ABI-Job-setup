#!groovy

pipeline {

    agent {
        node {
            label "TCaaS-DOCKER1-UB22"
        }
    }

    environment {
        DAY = new Date().format("u")
        DATETIME = new Date().format("yyyyMMdd-HHmm");
        HTTP_PROXY="http://proxy-dmz.intel.com:911"
        HTTPS_PROXY="http://proxy-dmz.intel.com:912"
        no_proxy="intel.com,.intel.com,10.0.0.0/8,192.168.0.0/16,localhost,.local,127.0.0.0/8,134.134.0.0/16"
        DOCKER_HTTP_PROXY="${HTTP_PROXY}"
        DOCKER_HTTPS_PROXY="${HTTPS_PROXY}"
        CMD_DOCKER_RUN = "docker run --rm -t \
        --privileged -e LOCAL_USER=lab_bldmstr -e LOCAL_USER_ID=`id -u` -e LOCAL_GROUP_ID=`id -g` \
        -v /nfs/png/home/lab_bldmstr/.gitconfig:/home/lab_bldmstr/.gitconfig \
        -v /nfs/png/home/lab_bldmstr/.netrc:/home/lab_bldmstr/.netrc \
        -v /nfs/png/home/lab_bldmstr/.git-credentials:/home/lab_bldmstr/.git-credentials \
        -v /nfs/png/home/lab_bldmstr/.ssh:/home/lab_bldmstr/.ssh \
        -v /nfs/png/disks/ecg_es_disk2:/nfs/png/disks/ecg_es_disk2 \
        -e http_proxy=${http_proxy} -e https_proxy=${https_proxy} \
        -v ${WORKSPACE}:${WORKSPACE} -w ${WORKSPACE} --name ${BUILD_TAG}_GENERAL \
        amr-registry.caas.intel.com/esc-devops/gen/lin/edge/ubuntu/package_builder:20221114_1503"
    }

    options {
        timestamps()
        disableConcurrentBuilds()
        buildDiscarder(logRotator(numToKeepStr: '90', artifactDaysToKeepStr: '30'))
        skipDefaultCheckout()
    }

    parameters {
        booleanParam(name: 'CLEANWS', defaultValue: true, description: 'Clean workspace')
        booleanParam(name: 'EMAIL', defaultValue: true, description: 'Email notification upon job completion')
        booleanParam(name: 'PUBLISH', defaultValue: true, description: 'Artifacts deployment')
        string(name: 'TEP_BRANCH', trim: true, defaultValue: 'master', description: 'Provide Git init Branch name, Ex: master')
    }

    stages {

        stage ("CLEAN") {
            when {
                expression { params.CLEANWS == true }
            }
            steps {
                deleteDir()
            }
        }

        stage ("SCM") {
            steps {
                parallel (
                    "meta_tep": {
                        checkout([$class: 'GitSCM',
                        userRemoteConfigs: [[credentialsId: 'GitHub-Token', url: 'https://github.com/intel-innersource/os.security.tep.meta-tep-build-setup.git']],
                        branches: [[name: "refs/heads/master"]],
                        extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'tep_build'],
                        [$class: 'ScmName', name: 'esc-engservices'],
                        [$class: 'CleanBeforeCheckout'],
                        [$class: 'CloneOption', timeout: 60],
                        [$class: 'CheckoutOption', timeout: 60]]])
                    },
                    "eng_services": {
                        checkout changelog: false, scm: ([$class: 'GitSCM',
                        userRemoteConfigs: [[credentialsId: 'GitHub-Token', url: 'https://github.com/intel-innersource/libraries.devops.henosis.build.automation.services.git']],
                        branches: [[name: 'refs/heads/master']],
                        extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'esc-engservices'],
                        [$class: 'ScmName', name: 'esc-engservices'],
                        [$class: 'CloneOption', timeout: 60],
                        [$class: 'CleanBeforeCheckout'], 
                        [$class: 'CheckoutOption', timeout: 60]]])
                    }
                )
            }
        }

        stage ("RELEASE_PK DOWNLOAD") {
            steps {
                script {
                    def artServer = Artifactory.server "ubit-artifactory-ba.intel.com"
                    def artFiles  = """ {
                        "files": [
                            {
                                "pattern": "pse-tgl-local/tep/builds/tep-release-pkg/*/*/tep-acrn-release.tar.gz.bz2",
                                "target": "download/",
                                "flat": "true",
                                "recursive": "true",
                                "sortBy": ["modified"],
                                "sortOrder": "desc",
                                "limit" : 1
                            }
                        ]
                    }"""
                    artServer.download spec: artFiles
                }
            }
        }

        stage ("BUILD") {
            steps {
                withCredentials([usernamePassword(credentialsId: 'BuildAutomation', passwordVariable: 'BUILD_PWD', usernameVariable: 'BUILD_USR')]) {
                    dir("${WORKSPACE}") {
                        sh """#!/bin/bash
                            cd ${WORKSPACE}/download && \
                            bzip2 -d tep-acrn-release.tar.gz.bz2
                        """    
                        sh"""
                            cd ${WORKSPACE}/download && \
                            tar xvf tep-acrn-release.tar.gz && \
                            cd tep-acrn-release && \
                            ./debian_build_acrn.sh rel
                        """
                    }  
                }
            }
        }
    }

    post{
        always{
            sh"""
                $CMD_DOCKER_RUN bash -c "sudo chown -R 44051:17838 ${WORKSPACE}/"
            """
        }
    }
}
